#!/usr/bin/env python3

import unittest
import rospy
import requests
import time

FLASK_URL = "http://localhost:5000"

class TestIntegrationFlask(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        """VÃ©rifier que Flask est bien dÃ©marrÃ© et se connecter"""
        rospy.init_node('test_integration_flask', anonymous=True)
        time.sleep(5)  # Laisser Flask se lancer
        cls.session = requests.Session()  # ğŸ”¥ CrÃ©er une session persistante

        # ğŸ”‘ Connexion avec un utilisateur valide
        login_data = {
            "username": "admin",  # ğŸ”¥ Mets ici un identifiant valide
            "password": "admin"  # ğŸ”¥ Mets ici le bon mot de passe
        }
        response = cls.session.post(f"{FLASK_URL}/", data=login_data)

        if response.status_code != 200:
            print("ğŸ”´ Ã‰chec de la connexion :", response.text)

    def test_get_database_data(self):
        """Tester si Flask rÃ©cupÃ¨re bien les donnÃ©es des bases SQLite aprÃ¨s connexion."""
        response = self.session.get(f"{FLASK_URL}/data")  # ğŸ”¥ Utiliser la session connectÃ©e

        print("RÃ©ponse brute :", response.text)  # ğŸ”¥ Debug
        print("Statut HTTP :", response.status_code)  # ğŸ”¥ Debug

        self.assertEqual(response.status_code, 200, "L'API /data devrait retourner 200")
        
        try:
            data = response.json()
            print("DonnÃ©es JSON :", data)  # ğŸ”¥ Debug
        except requests.exceptions.JSONDecodeError as e:
            print("Erreur JSON :", e)
            print("Contenu brut reÃ§u :", response.text)
            self.fail("Le serveur n'a pas retournÃ© de JSON valide.")

        self.assertIn("temperature", data, "La clÃ© temperature doit Ãªtre prÃ©sente")
        self.assertIn("humidity", data, "La clÃ© humidite doit Ãªtre prÃ©sente")
        self.assertIn("volume", data, "La clÃ© volume doit Ãªtre prÃ©sente")

if __name__ == '__main__':
    import rosunit
    rosunit.unitrun('webinterface', 'test_integration_flask', TestIntegrationFlask)
